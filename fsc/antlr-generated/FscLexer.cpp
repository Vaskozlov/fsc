
// Generated from Fsc.g4 by ANTLR 4.11.1


#include "FscLexer.h"


using namespace antlr4;



using namespace antlr4;

namespace {

struct FscLexerStaticData final {
  FscLexerStaticData(std::vector<std::string> ruleNames,
                          std::vector<std::string> channelNames,
                          std::vector<std::string> modeNames,
                          std::vector<std::string> literalNames,
                          std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), channelNames(std::move(channelNames)),
        modeNames(std::move(modeNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  FscLexerStaticData(const FscLexerStaticData&) = delete;
  FscLexerStaticData(FscLexerStaticData&&) = delete;
  FscLexerStaticData& operator=(const FscLexerStaticData&) = delete;
  FscLexerStaticData& operator=(FscLexerStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> channelNames;
  const std::vector<std::string> modeNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag fsclexerLexerOnceFlag;
FscLexerStaticData *fsclexerLexerStaticData = nullptr;

void fsclexerLexerInitialize() {
  assert(fsclexerLexerStaticData == nullptr);
  auto staticData = std::make_unique<FscLexerStaticData>(
    std::vector<std::string>{
      "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
      "T__9", "T__10", "T__11", "T__12", "T__13", "T__14", "T__15", "T__16", 
      "T__17", "T__18", "T__19", "T__20", "T__21", "T__22", "T__23", "T__24", 
      "T__25", "T__26", "T__27", "T__28", "AS", "ADD", "SUB", "MUL", "DIV", 
      "MOD", "DOT", "ASSIGN", "EQUALITY", "INEQUALITY", "LOGICAL_AND", "LOGICAL_OR", 
      "TRUE", "FALSE", "INT", "FLOAT", "CHAR", "STRING", "IDENTIFIER", "LAYOUT"
    },
    std::vector<std::string>{
      "DEFAULT_TOKEN_CHANNEL", "HIDDEN"
    },
    std::vector<std::string>{
      "DEFAULT_MODE"
    },
    std::vector<std::string>{
      "", "'<'", "'>'", "'return'", "'{'", "'}'", "'class'", "'while'", 
      "'if'", "'elif'", "'else'", "'func'", "'->'", "'public'", "'private'", 
      "'protected'", "'fileprivae'", "'in'", "'out'", "'inout'", "'('", 
      "')'", "','", "'let'", "'var'", "':'", "'\\n'", "'.'", "'\\r'", "';'", 
      "'as'", "", "", "", "", "", "", "'='", "'=='", "'!='", "'&&'", "'||'", 
      "'true'", "'false'"
    },
    std::vector<std::string>{
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "AS", "ADD", "SUB", 
      "MUL", "DIV", "MOD", "DOT", "ASSIGN", "EQUALITY", "INEQUALITY", "LOGICAL_AND", 
      "LOGICAL_OR", "TRUE", "FALSE", "INT", "FLOAT", "CHAR", "STRING", "IDENTIFIER", 
      "LAYOUT"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,0,49,331,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
  	6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
  	7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
  	7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
  	7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
  	7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
  	7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,1,0,
  	1,0,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,5,1,
  	5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,9,
  	1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,12,1,12,1,12,
  	1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,14,1,14,
  	1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,15,
  	1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,18,1,18,
  	1,18,1,18,1,18,1,18,1,19,1,19,1,20,1,20,1,21,1,21,1,22,1,22,1,22,1,22,
  	1,23,1,23,1,23,1,23,1,24,1,24,1,25,1,25,1,26,1,26,1,27,1,27,1,28,1,28,
  	1,29,1,29,1,29,1,30,1,30,1,31,1,31,1,32,1,32,1,33,1,33,1,34,1,34,1,35,
  	1,35,1,36,1,36,1,37,1,37,1,37,1,38,1,38,1,38,1,39,1,39,1,39,1,40,1,40,
  	1,40,1,41,1,41,1,41,1,41,1,41,1,42,1,42,1,42,1,42,1,42,1,42,1,43,4,43,
  	262,8,43,11,43,12,43,263,1,43,1,43,5,43,268,8,43,10,43,12,43,271,9,43,
  	3,43,273,8,43,1,44,5,44,276,8,44,10,44,12,44,279,9,44,1,44,1,44,4,44,
  	283,8,44,11,44,12,44,284,1,44,1,44,5,44,289,8,44,10,44,12,44,292,9,44,
  	3,44,294,8,44,1,45,1,45,1,45,1,45,1,45,3,45,301,8,45,3,45,303,8,45,1,
  	45,1,45,1,46,1,46,1,46,1,46,1,46,3,46,312,8,46,5,46,314,8,46,10,46,12,
  	46,317,9,46,1,46,1,46,1,47,1,47,5,47,323,8,47,10,47,12,47,326,9,47,1,
  	48,1,48,1,48,1,48,0,0,49,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,
  	21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,
  	22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,
  	67,34,69,35,71,36,73,37,75,38,77,39,79,40,81,41,83,42,85,43,87,44,89,
  	45,91,46,93,47,95,48,97,49,1,0,11,1,0,43,43,1,0,45,45,1,0,42,42,1,0,47,
  	47,1,0,37,37,1,0,46,46,1,0,48,57,3,0,65,90,95,95,97,122,4,0,48,57,65,
  	90,95,95,97,122,4,0,10,10,13,13,34,34,92,92,2,0,9,9,32,32,343,0,1,1,0,
  	0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,
  	1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,
  	0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,
  	0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,
  	1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,
  	0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,
  	0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,
  	1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,
  	0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,
  	1,99,1,0,0,0,3,101,1,0,0,0,5,103,1,0,0,0,7,110,1,0,0,0,9,112,1,0,0,0,
  	11,114,1,0,0,0,13,120,1,0,0,0,15,126,1,0,0,0,17,129,1,0,0,0,19,134,1,
  	0,0,0,21,139,1,0,0,0,23,144,1,0,0,0,25,147,1,0,0,0,27,154,1,0,0,0,29,
  	162,1,0,0,0,31,172,1,0,0,0,33,183,1,0,0,0,35,186,1,0,0,0,37,190,1,0,0,
  	0,39,196,1,0,0,0,41,198,1,0,0,0,43,200,1,0,0,0,45,202,1,0,0,0,47,206,
  	1,0,0,0,49,210,1,0,0,0,51,212,1,0,0,0,53,214,1,0,0,0,55,216,1,0,0,0,57,
  	218,1,0,0,0,59,220,1,0,0,0,61,223,1,0,0,0,63,225,1,0,0,0,65,227,1,0,0,
  	0,67,229,1,0,0,0,69,231,1,0,0,0,71,233,1,0,0,0,73,235,1,0,0,0,75,237,
  	1,0,0,0,77,240,1,0,0,0,79,243,1,0,0,0,81,246,1,0,0,0,83,249,1,0,0,0,85,
  	254,1,0,0,0,87,261,1,0,0,0,89,277,1,0,0,0,91,295,1,0,0,0,93,306,1,0,0,
  	0,95,320,1,0,0,0,97,327,1,0,0,0,99,100,5,60,0,0,100,2,1,0,0,0,101,102,
  	5,62,0,0,102,4,1,0,0,0,103,104,5,114,0,0,104,105,5,101,0,0,105,106,5,
  	116,0,0,106,107,5,117,0,0,107,108,5,114,0,0,108,109,5,110,0,0,109,6,1,
  	0,0,0,110,111,5,123,0,0,111,8,1,0,0,0,112,113,5,125,0,0,113,10,1,0,0,
  	0,114,115,5,99,0,0,115,116,5,108,0,0,116,117,5,97,0,0,117,118,5,115,0,
  	0,118,119,5,115,0,0,119,12,1,0,0,0,120,121,5,119,0,0,121,122,5,104,0,
  	0,122,123,5,105,0,0,123,124,5,108,0,0,124,125,5,101,0,0,125,14,1,0,0,
  	0,126,127,5,105,0,0,127,128,5,102,0,0,128,16,1,0,0,0,129,130,5,101,0,
  	0,130,131,5,108,0,0,131,132,5,105,0,0,132,133,5,102,0,0,133,18,1,0,0,
  	0,134,135,5,101,0,0,135,136,5,108,0,0,136,137,5,115,0,0,137,138,5,101,
  	0,0,138,20,1,0,0,0,139,140,5,102,0,0,140,141,5,117,0,0,141,142,5,110,
  	0,0,142,143,5,99,0,0,143,22,1,0,0,0,144,145,5,45,0,0,145,146,5,62,0,0,
  	146,24,1,0,0,0,147,148,5,112,0,0,148,149,5,117,0,0,149,150,5,98,0,0,150,
  	151,5,108,0,0,151,152,5,105,0,0,152,153,5,99,0,0,153,26,1,0,0,0,154,155,
  	5,112,0,0,155,156,5,114,0,0,156,157,5,105,0,0,157,158,5,118,0,0,158,159,
  	5,97,0,0,159,160,5,116,0,0,160,161,5,101,0,0,161,28,1,0,0,0,162,163,5,
  	112,0,0,163,164,5,114,0,0,164,165,5,111,0,0,165,166,5,116,0,0,166,167,
  	5,101,0,0,167,168,5,99,0,0,168,169,5,116,0,0,169,170,5,101,0,0,170,171,
  	5,100,0,0,171,30,1,0,0,0,172,173,5,102,0,0,173,174,5,105,0,0,174,175,
  	5,108,0,0,175,176,5,101,0,0,176,177,5,112,0,0,177,178,5,114,0,0,178,179,
  	5,105,0,0,179,180,5,118,0,0,180,181,5,97,0,0,181,182,5,101,0,0,182,32,
  	1,0,0,0,183,184,5,105,0,0,184,185,5,110,0,0,185,34,1,0,0,0,186,187,5,
  	111,0,0,187,188,5,117,0,0,188,189,5,116,0,0,189,36,1,0,0,0,190,191,5,
  	105,0,0,191,192,5,110,0,0,192,193,5,111,0,0,193,194,5,117,0,0,194,195,
  	5,116,0,0,195,38,1,0,0,0,196,197,5,40,0,0,197,40,1,0,0,0,198,199,5,41,
  	0,0,199,42,1,0,0,0,200,201,5,44,0,0,201,44,1,0,0,0,202,203,5,108,0,0,
  	203,204,5,101,0,0,204,205,5,116,0,0,205,46,1,0,0,0,206,207,5,118,0,0,
  	207,208,5,97,0,0,208,209,5,114,0,0,209,48,1,0,0,0,210,211,5,58,0,0,211,
  	50,1,0,0,0,212,213,5,10,0,0,213,52,1,0,0,0,214,215,5,46,0,0,215,54,1,
  	0,0,0,216,217,5,13,0,0,217,56,1,0,0,0,218,219,5,59,0,0,219,58,1,0,0,0,
  	220,221,5,97,0,0,221,222,5,115,0,0,222,60,1,0,0,0,223,224,7,0,0,0,224,
  	62,1,0,0,0,225,226,7,1,0,0,226,64,1,0,0,0,227,228,7,2,0,0,228,66,1,0,
  	0,0,229,230,7,3,0,0,230,68,1,0,0,0,231,232,7,4,0,0,232,70,1,0,0,0,233,
  	234,7,5,0,0,234,72,1,0,0,0,235,236,5,61,0,0,236,74,1,0,0,0,237,238,5,
  	61,0,0,238,239,5,61,0,0,239,76,1,0,0,0,240,241,5,33,0,0,241,242,5,61,
  	0,0,242,78,1,0,0,0,243,244,5,38,0,0,244,245,5,38,0,0,245,80,1,0,0,0,246,
  	247,5,124,0,0,247,248,5,124,0,0,248,82,1,0,0,0,249,250,5,116,0,0,250,
  	251,5,114,0,0,251,252,5,117,0,0,252,253,5,101,0,0,253,84,1,0,0,0,254,
  	255,5,102,0,0,255,256,5,97,0,0,256,257,5,108,0,0,257,258,5,115,0,0,258,
  	259,5,101,0,0,259,86,1,0,0,0,260,262,7,6,0,0,261,260,1,0,0,0,262,263,
  	1,0,0,0,263,261,1,0,0,0,263,264,1,0,0,0,264,272,1,0,0,0,265,269,7,7,0,
  	0,266,268,7,8,0,0,267,266,1,0,0,0,268,271,1,0,0,0,269,267,1,0,0,0,269,
  	270,1,0,0,0,270,273,1,0,0,0,271,269,1,0,0,0,272,265,1,0,0,0,272,273,1,
  	0,0,0,273,88,1,0,0,0,274,276,7,6,0,0,275,274,1,0,0,0,276,279,1,0,0,0,
  	277,275,1,0,0,0,277,278,1,0,0,0,278,280,1,0,0,0,279,277,1,0,0,0,280,282,
  	7,5,0,0,281,283,7,6,0,0,282,281,1,0,0,0,283,284,1,0,0,0,284,282,1,0,0,
  	0,284,285,1,0,0,0,285,293,1,0,0,0,286,290,7,7,0,0,287,289,7,8,0,0,288,
  	287,1,0,0,0,289,292,1,0,0,0,290,288,1,0,0,0,290,291,1,0,0,0,291,294,1,
  	0,0,0,292,290,1,0,0,0,293,286,1,0,0,0,293,294,1,0,0,0,294,90,1,0,0,0,
  	295,302,5,39,0,0,296,303,8,9,0,0,297,300,5,92,0,0,298,301,9,0,0,0,299,
  	301,5,0,0,1,300,298,1,0,0,0,300,299,1,0,0,0,301,303,1,0,0,0,302,296,1,
  	0,0,0,302,297,1,0,0,0,303,304,1,0,0,0,304,305,5,39,0,0,305,92,1,0,0,0,
  	306,315,5,34,0,0,307,314,8,9,0,0,308,311,5,92,0,0,309,312,9,0,0,0,310,
  	312,5,0,0,1,311,309,1,0,0,0,311,310,1,0,0,0,312,314,1,0,0,0,313,307,1,
  	0,0,0,313,308,1,0,0,0,314,317,1,0,0,0,315,313,1,0,0,0,315,316,1,0,0,0,
  	316,318,1,0,0,0,317,315,1,0,0,0,318,319,5,34,0,0,319,94,1,0,0,0,320,324,
  	7,7,0,0,321,323,7,8,0,0,322,321,1,0,0,0,323,326,1,0,0,0,324,322,1,0,0,
  	0,324,325,1,0,0,0,325,96,1,0,0,0,326,324,1,0,0,0,327,328,7,10,0,0,328,
  	329,1,0,0,0,329,330,6,48,0,0,330,98,1,0,0,0,14,0,263,269,272,277,284,
  	290,293,300,302,311,313,315,324,1,6,0,0
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  fsclexerLexerStaticData = staticData.release();
}

}

FscLexer::FscLexer(CharStream *input) : Lexer(input) {
  FscLexer::initialize();
  _interpreter = new atn::LexerATNSimulator(this, *fsclexerLexerStaticData->atn, fsclexerLexerStaticData->decisionToDFA, fsclexerLexerStaticData->sharedContextCache);
}

FscLexer::~FscLexer() {
  delete _interpreter;
}

std::string FscLexer::getGrammarFileName() const {
  return "Fsc.g4";
}

const std::vector<std::string>& FscLexer::getRuleNames() const {
  return fsclexerLexerStaticData->ruleNames;
}

const std::vector<std::string>& FscLexer::getChannelNames() const {
  return fsclexerLexerStaticData->channelNames;
}

const std::vector<std::string>& FscLexer::getModeNames() const {
  return fsclexerLexerStaticData->modeNames;
}

const dfa::Vocabulary& FscLexer::getVocabulary() const {
  return fsclexerLexerStaticData->vocabulary;
}

antlr4::atn::SerializedATNView FscLexer::getSerializedATN() const {
  return fsclexerLexerStaticData->serializedATN;
}

const atn::ATN& FscLexer::getATN() const {
  return *fsclexerLexerStaticData->atn;
}




void FscLexer::initialize() {
  ::antlr4::internal::call_once(fsclexerLexerOnceFlag, fsclexerLexerInitialize);
}
