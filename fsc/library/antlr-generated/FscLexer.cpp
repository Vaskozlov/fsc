
// Generated from Fsc.g4 by ANTLR 4.11.1


#include "FscLexer.h"


using namespace antlr4;



using namespace antlr4;

namespace {

struct FscLexerStaticData final {
  FscLexerStaticData(std::vector<std::string> ruleNames,
                          std::vector<std::string> channelNames,
                          std::vector<std::string> modeNames,
                          std::vector<std::string> literalNames,
                          std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), channelNames(std::move(channelNames)),
        modeNames(std::move(modeNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  FscLexerStaticData(const FscLexerStaticData&) = delete;
  FscLexerStaticData(FscLexerStaticData&&) = delete;
  FscLexerStaticData& operator=(const FscLexerStaticData&) = delete;
  FscLexerStaticData& operator=(FscLexerStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> channelNames;
  const std::vector<std::string> modeNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag fsclexerLexerOnceFlag;
FscLexerStaticData *fsclexerLexerStaticData = nullptr;

void fsclexerLexerInitialize() {
  assert(fsclexerLexerStaticData == nullptr);
  auto staticData = std::make_unique<FscLexerStaticData>(
    std::vector<std::string>{
      "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
      "T__9", "T__10", "T__11", "T__12", "T__13", "T__14", "T__15", "T__16", 
      "T__17", "T__18", "T__19", "T__20", "T__21", "T__22", "T__23", "T__24", 
      "T__25", "T__26", "AS", "ADD", "SUB", "MUL", "DIV", "MOD", "DOT", 
      "INVERT", "LOGICAL_NOT", "ANGLE_OPENING", "ANGLE_CLOSING", "ASSIGN_ADD", 
      "ASSIGN_SUB", "ASSIGN_MUL", "ASSIGN_DIV", "ASSIGN_MOD", "ASSIGN", 
      "LESS", "GREATER", "LESS_EQ", "GREATER_EQ", "EQUALITY", "INEQUALITY", 
      "LOGICAL_AND", "LOGICAL_OR", "TRUE", "FALSE", "INT", "FLOAT", "CHAR", 
      "STRING", "IDENTIFIER", "LAYOUT"
    },
    std::vector<std::string>{
      "DEFAULT_TOKEN_CHANNEL", "HIDDEN"
    },
    std::vector<std::string>{
      "DEFAULT_MODE"
    },
    std::vector<std::string>{
      "", "','", "'return'", "'{'", "'}'", "'class'", "'while'", "'if'", 
      "'elif'", "'else'", "'func'", "'->'", "'public'", "'private'", "'protected'", 
      "'fileprivae'", "'in'", "'out'", "'inout'", "'('", "')'", "'let'", 
      "'var'", "':'", "'\\n'", "'.'", "'\\r'", "';'", "'as'", "", "", "", 
      "", "", "", "", "", "'['", "']'", "'+='", "'-='", "'*='", "'/='", 
      "'%='", "'='", "'<'", "'>'", "'<='", "'>='", "'=='", "'!='", "'&&'", 
      "'||'", "'true'", "'false'"
    },
    std::vector<std::string>{
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "AS", "ADD", "SUB", "MUL", 
      "DIV", "MOD", "DOT", "INVERT", "LOGICAL_NOT", "ANGLE_OPENING", "ANGLE_CLOSING", 
      "ASSIGN_ADD", "ASSIGN_SUB", "ASSIGN_MUL", "ASSIGN_DIV", "ASSIGN_MOD", 
      "ASSIGN", "LESS", "GREATER", "LESS_EQ", "GREATER_EQ", "EQUALITY", 
      "INEQUALITY", "LOGICAL_AND", "LOGICAL_OR", "TRUE", "FALSE", "INT", 
      "FLOAT", "CHAR", "STRING", "IDENTIFIER", "LAYOUT"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,0,60,399,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
  	6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
  	7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
  	7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
  	7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
  	7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
  	7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
  	7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
  	7,56,2,57,7,57,2,58,7,58,2,59,7,59,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,
  	1,1,2,1,2,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,6,
  	1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,
  	10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,
  	12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,
  	14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,
  	16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,17,1,18,1,18,1,19,1,19,1,
  	20,1,20,1,20,1,20,1,21,1,21,1,21,1,21,1,22,1,22,1,23,1,23,1,24,1,24,1,
  	25,1,25,1,26,1,26,1,27,1,27,1,27,1,28,1,28,1,29,1,29,1,30,1,30,1,31,1,
  	31,1,32,1,32,1,33,1,33,1,34,1,34,1,35,1,35,1,36,1,36,1,37,1,37,1,38,1,
  	38,1,38,1,39,1,39,1,39,1,40,1,40,1,40,1,41,1,41,1,41,1,42,1,42,1,42,1,
  	43,1,43,1,44,1,44,1,45,1,45,1,46,1,46,1,46,1,47,1,47,1,47,1,48,1,48,1,
  	48,1,49,1,49,1,49,1,50,1,50,1,50,1,51,1,51,1,51,1,52,1,52,1,52,1,52,1,
  	52,1,53,1,53,1,53,1,53,1,53,1,53,1,54,3,54,313,8,54,1,54,4,54,316,8,54,
  	11,54,12,54,317,1,54,1,54,5,54,322,8,54,10,54,12,54,325,9,54,3,54,327,
  	8,54,1,55,3,55,330,8,55,1,55,5,55,333,8,55,10,55,12,55,336,9,55,1,55,
  	1,55,4,55,340,8,55,11,55,12,55,341,1,55,1,55,3,55,346,8,55,1,55,4,55,
  	349,8,55,11,55,12,55,350,3,55,353,8,55,1,55,1,55,5,55,357,8,55,10,55,
  	12,55,360,9,55,3,55,362,8,55,1,56,1,56,1,56,1,56,1,56,3,56,369,8,56,3,
  	56,371,8,56,1,56,1,56,1,57,1,57,1,57,1,57,1,57,3,57,380,8,57,5,57,382,
  	8,57,10,57,12,57,385,9,57,1,57,1,57,1,58,1,58,5,58,391,8,58,10,58,12,
  	58,394,9,58,1,59,1,59,1,59,1,59,0,0,60,1,1,3,2,5,3,7,4,9,5,11,6,13,7,
  	15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,
  	39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,
  	31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,79,40,81,41,83,42,
  	85,43,87,44,89,45,91,46,93,47,95,48,97,49,99,50,101,51,103,52,105,53,
  	107,54,109,55,111,56,113,57,115,58,117,59,119,60,1,0,13,1,0,43,43,1,0,
  	45,45,1,0,42,42,1,0,47,47,1,0,37,37,1,0,46,46,1,0,126,126,1,0,33,33,1,
  	0,48,57,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,4,0,10,10,
  	13,13,34,34,92,92,2,0,9,9,32,32,416,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,
  	0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,
  	1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,
  	0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,
  	0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,
  	1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,
  	0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,
  	0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,
  	1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,
  	0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,0,101,1,0,0,0,
  	0,103,1,0,0,0,0,105,1,0,0,0,0,107,1,0,0,0,0,109,1,0,0,0,0,111,1,0,0,0,
  	0,113,1,0,0,0,0,115,1,0,0,0,0,117,1,0,0,0,0,119,1,0,0,0,1,121,1,0,0,0,
  	3,123,1,0,0,0,5,130,1,0,0,0,7,132,1,0,0,0,9,134,1,0,0,0,11,140,1,0,0,
  	0,13,146,1,0,0,0,15,149,1,0,0,0,17,154,1,0,0,0,19,159,1,0,0,0,21,164,
  	1,0,0,0,23,167,1,0,0,0,25,174,1,0,0,0,27,182,1,0,0,0,29,192,1,0,0,0,31,
  	203,1,0,0,0,33,206,1,0,0,0,35,210,1,0,0,0,37,216,1,0,0,0,39,218,1,0,0,
  	0,41,220,1,0,0,0,43,224,1,0,0,0,45,228,1,0,0,0,47,230,1,0,0,0,49,232,
  	1,0,0,0,51,234,1,0,0,0,53,236,1,0,0,0,55,238,1,0,0,0,57,241,1,0,0,0,59,
  	243,1,0,0,0,61,245,1,0,0,0,63,247,1,0,0,0,65,249,1,0,0,0,67,251,1,0,0,
  	0,69,253,1,0,0,0,71,255,1,0,0,0,73,257,1,0,0,0,75,259,1,0,0,0,77,261,
  	1,0,0,0,79,264,1,0,0,0,81,267,1,0,0,0,83,270,1,0,0,0,85,273,1,0,0,0,87,
  	276,1,0,0,0,89,278,1,0,0,0,91,280,1,0,0,0,93,282,1,0,0,0,95,285,1,0,0,
  	0,97,288,1,0,0,0,99,291,1,0,0,0,101,294,1,0,0,0,103,297,1,0,0,0,105,300,
  	1,0,0,0,107,305,1,0,0,0,109,312,1,0,0,0,111,329,1,0,0,0,113,363,1,0,0,
  	0,115,374,1,0,0,0,117,388,1,0,0,0,119,395,1,0,0,0,121,122,5,44,0,0,122,
  	2,1,0,0,0,123,124,5,114,0,0,124,125,5,101,0,0,125,126,5,116,0,0,126,127,
  	5,117,0,0,127,128,5,114,0,0,128,129,5,110,0,0,129,4,1,0,0,0,130,131,5,
  	123,0,0,131,6,1,0,0,0,132,133,5,125,0,0,133,8,1,0,0,0,134,135,5,99,0,
  	0,135,136,5,108,0,0,136,137,5,97,0,0,137,138,5,115,0,0,138,139,5,115,
  	0,0,139,10,1,0,0,0,140,141,5,119,0,0,141,142,5,104,0,0,142,143,5,105,
  	0,0,143,144,5,108,0,0,144,145,5,101,0,0,145,12,1,0,0,0,146,147,5,105,
  	0,0,147,148,5,102,0,0,148,14,1,0,0,0,149,150,5,101,0,0,150,151,5,108,
  	0,0,151,152,5,105,0,0,152,153,5,102,0,0,153,16,1,0,0,0,154,155,5,101,
  	0,0,155,156,5,108,0,0,156,157,5,115,0,0,157,158,5,101,0,0,158,18,1,0,
  	0,0,159,160,5,102,0,0,160,161,5,117,0,0,161,162,5,110,0,0,162,163,5,99,
  	0,0,163,20,1,0,0,0,164,165,5,45,0,0,165,166,5,62,0,0,166,22,1,0,0,0,167,
  	168,5,112,0,0,168,169,5,117,0,0,169,170,5,98,0,0,170,171,5,108,0,0,171,
  	172,5,105,0,0,172,173,5,99,0,0,173,24,1,0,0,0,174,175,5,112,0,0,175,176,
  	5,114,0,0,176,177,5,105,0,0,177,178,5,118,0,0,178,179,5,97,0,0,179,180,
  	5,116,0,0,180,181,5,101,0,0,181,26,1,0,0,0,182,183,5,112,0,0,183,184,
  	5,114,0,0,184,185,5,111,0,0,185,186,5,116,0,0,186,187,5,101,0,0,187,188,
  	5,99,0,0,188,189,5,116,0,0,189,190,5,101,0,0,190,191,5,100,0,0,191,28,
  	1,0,0,0,192,193,5,102,0,0,193,194,5,105,0,0,194,195,5,108,0,0,195,196,
  	5,101,0,0,196,197,5,112,0,0,197,198,5,114,0,0,198,199,5,105,0,0,199,200,
  	5,118,0,0,200,201,5,97,0,0,201,202,5,101,0,0,202,30,1,0,0,0,203,204,5,
  	105,0,0,204,205,5,110,0,0,205,32,1,0,0,0,206,207,5,111,0,0,207,208,5,
  	117,0,0,208,209,5,116,0,0,209,34,1,0,0,0,210,211,5,105,0,0,211,212,5,
  	110,0,0,212,213,5,111,0,0,213,214,5,117,0,0,214,215,5,116,0,0,215,36,
  	1,0,0,0,216,217,5,40,0,0,217,38,1,0,0,0,218,219,5,41,0,0,219,40,1,0,0,
  	0,220,221,5,108,0,0,221,222,5,101,0,0,222,223,5,116,0,0,223,42,1,0,0,
  	0,224,225,5,118,0,0,225,226,5,97,0,0,226,227,5,114,0,0,227,44,1,0,0,0,
  	228,229,5,58,0,0,229,46,1,0,0,0,230,231,5,10,0,0,231,48,1,0,0,0,232,233,
  	5,46,0,0,233,50,1,0,0,0,234,235,5,13,0,0,235,52,1,0,0,0,236,237,5,59,
  	0,0,237,54,1,0,0,0,238,239,5,97,0,0,239,240,5,115,0,0,240,56,1,0,0,0,
  	241,242,7,0,0,0,242,58,1,0,0,0,243,244,7,1,0,0,244,60,1,0,0,0,245,246,
  	7,2,0,0,246,62,1,0,0,0,247,248,7,3,0,0,248,64,1,0,0,0,249,250,7,4,0,0,
  	250,66,1,0,0,0,251,252,7,5,0,0,252,68,1,0,0,0,253,254,7,6,0,0,254,70,
  	1,0,0,0,255,256,7,7,0,0,256,72,1,0,0,0,257,258,5,91,0,0,258,74,1,0,0,
  	0,259,260,5,93,0,0,260,76,1,0,0,0,261,262,5,43,0,0,262,263,5,61,0,0,263,
  	78,1,0,0,0,264,265,5,45,0,0,265,266,5,61,0,0,266,80,1,0,0,0,267,268,5,
  	42,0,0,268,269,5,61,0,0,269,82,1,0,0,0,270,271,5,47,0,0,271,272,5,61,
  	0,0,272,84,1,0,0,0,273,274,5,37,0,0,274,275,5,61,0,0,275,86,1,0,0,0,276,
  	277,5,61,0,0,277,88,1,0,0,0,278,279,5,60,0,0,279,90,1,0,0,0,280,281,5,
  	62,0,0,281,92,1,0,0,0,282,283,5,60,0,0,283,284,5,61,0,0,284,94,1,0,0,
  	0,285,286,5,62,0,0,286,287,5,61,0,0,287,96,1,0,0,0,288,289,5,61,0,0,289,
  	290,5,61,0,0,290,98,1,0,0,0,291,292,5,33,0,0,292,293,5,61,0,0,293,100,
  	1,0,0,0,294,295,5,38,0,0,295,296,5,38,0,0,296,102,1,0,0,0,297,298,5,124,
  	0,0,298,299,5,124,0,0,299,104,1,0,0,0,300,301,5,116,0,0,301,302,5,114,
  	0,0,302,303,5,117,0,0,303,304,5,101,0,0,304,106,1,0,0,0,305,306,5,102,
  	0,0,306,307,5,97,0,0,307,308,5,108,0,0,308,309,5,115,0,0,309,310,5,101,
  	0,0,310,108,1,0,0,0,311,313,5,45,0,0,312,311,1,0,0,0,312,313,1,0,0,0,
  	313,315,1,0,0,0,314,316,7,8,0,0,315,314,1,0,0,0,316,317,1,0,0,0,317,315,
  	1,0,0,0,317,318,1,0,0,0,318,326,1,0,0,0,319,323,7,9,0,0,320,322,7,10,
  	0,0,321,320,1,0,0,0,322,325,1,0,0,0,323,321,1,0,0,0,323,324,1,0,0,0,324,
  	327,1,0,0,0,325,323,1,0,0,0,326,319,1,0,0,0,326,327,1,0,0,0,327,110,1,
  	0,0,0,328,330,5,45,0,0,329,328,1,0,0,0,329,330,1,0,0,0,330,334,1,0,0,
  	0,331,333,7,8,0,0,332,331,1,0,0,0,333,336,1,0,0,0,334,332,1,0,0,0,334,
  	335,1,0,0,0,335,337,1,0,0,0,336,334,1,0,0,0,337,339,7,5,0,0,338,340,7,
  	8,0,0,339,338,1,0,0,0,340,341,1,0,0,0,341,339,1,0,0,0,341,342,1,0,0,0,
  	342,352,1,0,0,0,343,345,5,101,0,0,344,346,5,45,0,0,345,344,1,0,0,0,345,
  	346,1,0,0,0,346,348,1,0,0,0,347,349,7,8,0,0,348,347,1,0,0,0,349,350,1,
  	0,0,0,350,348,1,0,0,0,350,351,1,0,0,0,351,353,1,0,0,0,352,343,1,0,0,0,
  	352,353,1,0,0,0,353,361,1,0,0,0,354,358,7,9,0,0,355,357,7,10,0,0,356,
  	355,1,0,0,0,357,360,1,0,0,0,358,356,1,0,0,0,358,359,1,0,0,0,359,362,1,
  	0,0,0,360,358,1,0,0,0,361,354,1,0,0,0,361,362,1,0,0,0,362,112,1,0,0,0,
  	363,370,5,39,0,0,364,371,8,11,0,0,365,368,5,92,0,0,366,369,9,0,0,0,367,
  	369,5,0,0,1,368,366,1,0,0,0,368,367,1,0,0,0,369,371,1,0,0,0,370,364,1,
  	0,0,0,370,365,1,0,0,0,371,372,1,0,0,0,372,373,5,39,0,0,373,114,1,0,0,
  	0,374,383,5,34,0,0,375,382,8,11,0,0,376,379,5,92,0,0,377,380,9,0,0,0,
  	378,380,5,0,0,1,379,377,1,0,0,0,379,378,1,0,0,0,380,382,1,0,0,0,381,375,
  	1,0,0,0,381,376,1,0,0,0,382,385,1,0,0,0,383,381,1,0,0,0,383,384,1,0,0,
  	0,384,386,1,0,0,0,385,383,1,0,0,0,386,387,5,34,0,0,387,116,1,0,0,0,388,
  	392,7,9,0,0,389,391,7,10,0,0,390,389,1,0,0,0,391,394,1,0,0,0,392,390,
  	1,0,0,0,392,393,1,0,0,0,393,118,1,0,0,0,394,392,1,0,0,0,395,396,7,12,
  	0,0,396,397,1,0,0,0,397,398,6,59,0,0,398,120,1,0,0,0,19,0,312,317,323,
  	326,329,334,341,345,350,352,358,361,368,370,379,381,383,392,1,6,0,0
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  fsclexerLexerStaticData = staticData.release();
}

}

FscLexer::FscLexer(CharStream *input) : Lexer(input) {
  FscLexer::initialize();
  _interpreter = new atn::LexerATNSimulator(this, *fsclexerLexerStaticData->atn, fsclexerLexerStaticData->decisionToDFA, fsclexerLexerStaticData->sharedContextCache);
}

FscLexer::~FscLexer() {
  delete _interpreter;
}

std::string FscLexer::getGrammarFileName() const {
  return "Fsc.g4";
}

const std::vector<std::string>& FscLexer::getRuleNames() const {
  return fsclexerLexerStaticData->ruleNames;
}

const std::vector<std::string>& FscLexer::getChannelNames() const {
  return fsclexerLexerStaticData->channelNames;
}

const std::vector<std::string>& FscLexer::getModeNames() const {
  return fsclexerLexerStaticData->modeNames;
}

const dfa::Vocabulary& FscLexer::getVocabulary() const {
  return fsclexerLexerStaticData->vocabulary;
}

antlr4::atn::SerializedATNView FscLexer::getSerializedATN() const {
  return fsclexerLexerStaticData->serializedATN;
}

const atn::ATN& FscLexer::getATN() const {
  return *fsclexerLexerStaticData->atn;
}




void FscLexer::initialize() {
  ::antlr4::internal::call_once(fsclexerLexerOnceFlag, fsclexerLexerInitialize);
}
